Handling forms in Next.js involves several steps, including setting up form controls, managing form state, performing validation, sending data to an API, and optionally rendering the page with server-side rendering (SSR) or static site generation (SSG). Here’s a comprehensive guide to handling forms in Next.js, including validation and data submission.

### 1. **Setting Up Form Controls**

You can use controlled components in React for form handling. Controlled components are form elements that receive their value from the component's state and update the state on change.

**Code Example**:

```jsx
// pages/contact.js
import React, { useState } from 'react';

const ContactForm = () => {
  const [formData, setFormData] = useState({
    name: '',
    email: '',
    message: '',
  });

  const [errors, setErrors] = useState({});

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData({
      ...formData,
      [name]: value,
    });
  };

  const validate = () => {
    const errors = {};
    if (!formData.name) errors.name = 'Name is required';
    if (!formData.email) errors.email = 'Email is required';
    if (!formData.message) errors.message = 'Message is required';
    return errors;
  };

  const handleSubmit = async (e) => {
    e.preventDefault();

    const validationErrors = validate();
    if (Object.keys(validationErrors).length > 0) {
      setErrors(validationErrors);
      return;
    }

    try {
      const res = await fetch('/api/contact', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(formData),
      });
      if (res.ok) {
        alert('Form submitted successfully');
        setFormData({
          name: '',
          email: '',
          message: '',
        });
      } else {
        alert('Submission failed');
      }
    } catch (error) {
      console.error('Error:', error);
    }
  };

  return (
    <form onSubmit={handleSubmit}>
      <div>
        <label>Name:</label>
        <input
          type="text"
          name="name"
          value={formData.name}
          onChange={handleChange}
        />
        {errors.name && <p>{errors.name}</p>}
      </div>
      <div>
        <label>Email:</label>
        <input
          type="email"
          name="email"
          value={formData.email}
          onChange={handleChange}
        />
        {errors.email && <p>{errors.email}</p>}
      </div>
      <div>
        <label>Message:</label>
        <textarea
          name="message"
          value={formData.message}
          onChange={handleChange}
        />
        {errors.message && <p>{errors.message}</p>}
      </div>
      <button type="submit">Submit</button>
    </form>
  );
};

export default ContactForm;
```

**Explanation**:
- **Controlled Components**: Inputs are controlled by React state (`formData`), and their values are updated using `handleChange`.
- **Validation**: The `validate` function checks for errors and updates the `errors` state if any fields are invalid.
- **Data Submission**: On form submission, `handleSubmit` sends a POST request to the API endpoint `/api/contact` with the form data.
- **Error Handling**: If the server responds with an error or if validation fails, appropriate error messages are shown.

### 2. **Server-Side Handling**

Next.js API routes can handle form submissions on the server side. Here’s an example of handling form submissions in an API route:

**Code Example**:

```js
// pages/api/contact.js
export default async function handler(req, res) {
  if (req.method === 'POST') {
    const { name, email, message } = req.body;

    // Perform server-side validation
    if (!name || !email || !message) {
      return res.status(400).json({ error: 'All fields are required' });
    }

    // Handle the form submission (e.g., save to a database, send an email, etc.)
    // For demonstration, we'll just log the data
    console.log('Form Data:', { name, email, message });

    // Respond with a success message
    res.status(200).json({ message: 'Form submitted successfully' });
  } else {
    // Handle any non-POST requests
    res.setHeader('Allow', ['POST']);
    res.status(405).end(`Method ${req.method} Not Allowed`);
  }
}
```

**Explanation**:
- **API Route**: Handles form submissions at the `/api/contact` endpoint.
- **Method Check**: Ensures that the request method is POST. Responds with an error if the method is not allowed.
- **Validation**: Checks for required fields and responds with a 400 status code if validation fails.
- **Processing**: You can handle the form data here (e.g., save it to a database or send an email).

### 3. **Validation Libraries**

For more complex validation, you might use libraries like `Yup` or `Validator`. Integrating `Yup` with `Formik` can simplify form validation:

**Code Example with Formik and Yup**:

```jsx
// pages/contact.js
import React from 'react';
import { Formik, Form, Field, ErrorMessage } from 'formik';
import * as Yup from 'yup';

const validationSchema = Yup.object({
  name: Yup.string().required('Name is required'),
  email: Yup.string().email('Invalid email address').required('Email is required'),
  message: Yup.string().required('Message is required'),
});

const ContactForm = () => {
  return (
    <Formik
      initialValues={{ name: '', email: '', message: '' }}
      validationSchema={validationSchema}
      onSubmit={async (values, { resetForm }) => {
        try {
          const res = await fetch('/api/contact', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify(values),
          });
          if (res.ok) {
            alert('Form submitted successfully');
            resetForm();
          } else {
            alert('Submission failed');
          }
        } catch (error) {
          console.error('Error:', error);
        }
      }}
    >
      <Form>
        <div>
          <label>Name:</label>
          <Field type="text" name="name" />
          <ErrorMessage name="name" component="div" />
        </div>
        <div>
          <label>Email:</label>
          <Field type="email" name="email" />
          <ErrorMessage name="email" component="div" />
        </div>
        <div>
          <label>Message:</label>
          <Field as="textarea" name="message" />
          <ErrorMessage name="message" component="div" />
        </div>
        <button type="submit">Submit</button>
      </Form>
    </Formik>
  );
};

export default ContactForm;
```

**Explanation**:
- **Formik**: Manages form state and handles form submission.
- **Yup**: Provides schema-based validation.
- **`Formik` and `Yup` Integration**: `validationSchema` defines the validation rules, and `Formik` takes care of form state management and validation.
- **`ErrorMessage`**: Displays validation errors.

### 4. **Server-Side Rendering (SSR) and Forms**

Forms are generally handled on the client side, but you can use SSR to fetch initial data for a form if needed.

**Code Example**:

```jsx
// pages/edit-profile.js
import React from 'react';

export async function getServerSideProps() {
  // Fetch initial data for the form
  const res = await fetch('https://api.example.com/user-profile');
  const data = await res.json();

  return {
    props: {
      user: data,
    },
  };
}

const EditProfile = ({ user }) => {
  // Handle form state and submission as previously shown

  return (
    <form>
      {/* Form elements populated with initial data */}
    </form>
  );
};

export default EditProfile;
```

**Explanation**:
- **`getServerSideProps`**: Fetches initial data for the form on each request.
- **`EditProfile`**: Uses the fetched data to populate the form fields.

### Summary

1. **Form Controls**: Use controlled components to manage form state.
2. **Validation**: Validate form data either manually or using libraries like Yup.
3. **Data Submission**: Send data to an API using methods like POST.
4. **Server-Side Handling**: Use Next.js API routes to handle form submissions and validation on the server side.
5. **Libraries**: Libraries like Formik and Yup can simplify form management and validation.

These methods and tools help manage forms efficiently in a Next.js application, ensuring both a smooth user experience and robust server-side handling.