Here’s a systematic and standard implementation of CRUD (Create, Read, Update, Delete) operations using MongoDB in a Node.js application, while incorporating best practices for building a website.

---

## **1. Setup Project**
### Install Dependencies
```bash
npm init -y
npm install express mongoose dotenv body-parser
```

---

## **2. Folder Structure**
Organize your project for maintainability:
```
project/
│
├── models/
│   └── user.js          # MongoDB Schema for Users
│
├── routes/
│   └── userRoutes.js    # Routes for CRUD operations
│
├── controllers/
│   └── userController.js # CRUD logic implementation
│
├── views/               # HTML/EJS templates (if needed)
│
├── .env                 # Environment variables
├── app.js               # Main application file
└── package.json
```

---

## **3. Environment Setup**
Create a `.env` file:
```env
PORT=3000
MONGO_URI=mongodb://localhost:27017/myDatabase
```

---

## **4. MongoDB Schema and Model**
Create `models/user.js`:
```javascript
import mongoose from 'mongoose';

const userSchema = new mongoose.Schema({
    name: {
        type: String,
        required: true,
        trim: true,
    },
    email: {
        type: String,
        required: true,
        unique: true,
        trim: true,
    },
    age: {
        type: Number,
        required: true,
    },
}, { timestamps: true });

export const User = mongoose.model('User', userSchema);
```

---

## **5. Controller Implementation**
Create `controllers/userController.js`:
```javascript
import { User } from '../models/user.js';

// Create a new user
export const createUser = async (req, res) => {
    try {
        const user = new User(req.body);
        const savedUser = await user.save();
        res.status(201).json({ message: 'User created successfully', data: savedUser });
    } catch (error) {
        res.status(400).json({ message: 'Error creating user', error });
    }
};

// Get all users
export const getUsers = async (req, res) => {
    try {
        const users = await User.find();
        res.status(200).json({ message: 'Users fetched successfully', data: users });
    } catch (error) {
        res.status(500).json({ message: 'Error fetching users', error });
    }
};

// Get a user by ID
export const getUserById = async (req, res) => {
    try {
        const user = await User.findById(req.params.id);
        if (!user) {
            return res.status(404).json({ message: 'User not found' });
        }
        res.status(200).json({ message: 'User fetched successfully', data: user });
    } catch (error) {
        res.status(500).json({ message: 'Error fetching user', error });
    }
};

// Update a user
export const updateUser = async (req, res) => {
    try {
        const updatedUser = await User.findByIdAndUpdate(req.params.id, req.body, {
            new: true,
            runValidators: true,
        });
        if (!updatedUser) {
            return res.status(404).json({ message: 'User not found' });
        }
        res.status(200).json({ message: 'User updated successfully', data: updatedUser });
    } catch (error) {
        res.status(400).json({ message: 'Error updating user', error });
    }
};

// Delete a user
export const deleteUser = async (req, res) => {
    try {
        const deletedUser = await User.findByIdAndDelete(req.params.id);
        if (!deletedUser) {
            return res.status(404).json({ message: 'User not found' });
        }
        res.status(200).json({ message: 'User deleted successfully' });
    } catch (error) {
        res.status(500).json({ message: 'Error deleting user', error });
    }
};
```

---

## **6. Define Routes**
Create `routes/userRoutes.js`:
```javascript
import express from 'express';
import { createUser, getUsers, getUserById, updateUser, deleteUser } from '../controllers/userController.js';

const router = express.Router();

router.post('/users', createUser);          // Create
router.get('/users', getUsers);             // Read (all)
router.get('/users/:id', getUserById);      // Read (by ID)
router.put('/users/:id', updateUser);       // Update
router.delete('/users/:id', deleteUser);    // Delete

export default router;
```

---

## **7. Main Application File**
Create `app.js`:
```javascript
import express from 'express';
import mongoose from 'mongoose';
import dotenv from 'dotenv';
import bodyParser from 'body-parser';
import userRoutes from './routes/userRoutes.js';

dotenv.config();

const app = express();

// Middleware
app.use(bodyParser.json());

// Routes
app.use('/api', userRoutes);

// MongoDB Connection
mongoose
    .connect(process.env.MONGO_URI, { useNewUrlParser: true, useUnifiedTopology: true })
    .then(() => console.log('Connected to MongoDB'))
    .catch((err) => console.error('Error connecting to MongoDB:', err));

// Start Server
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => console.log(`Server running on http://localhost:${PORT}`));
```

---

## **8. Testing the Application**
1. **Start MongoDB Server:**
   - Use `mongod` to start your MongoDB server.

2. **Run the App:**
   ```bash
   node app.js
   ```

3. **Test Using Postman:**
   - **POST** `/api/users` → Add a user (send JSON body).
   - **GET** `/api/users` → Retrieve all users.
   - **GET** `/api/users/:id` → Retrieve a user by ID.
   - **PUT** `/api/users/:id` → Update a user (send JSON body).
   - **DELETE** `/api/users/:id` → Delete a user.

---

This implementation ensures a clean separation of concerns by organizing code into **models**, **controllers**, and **routes**. It follows industry standards and can be easily extended for larger applications.